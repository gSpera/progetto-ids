#set text(lang: "it")
#set footnote(numbering: "*")
#set heading(numbering: "1.1")
#set par(justify: true)
#set page(
	numbering: (..nums) => nums.pos().map(str).join(" di "),
)

#align(center, rect(
    inset: 5pt,
    [#rect(
    width: 70%,
    [
		#align(center, smallcaps(text(20pt)[*Cooperativa pescatori dzuk*]))
		#align(center, [Giovanni Spera #h(1cm) #link("mailto:gui.spera@studenti.unina.it")])
    ])
]))

#let attore(x) = box(fill: red, inset: 1pt)[#x]
#let classe(x) = box(fill: blue, inset: 1pt)[#x]
#let attributo(x) = box(fill: green, inset: 1pt)[#x]
#let classeAttore(x) = box(fill: purple, inset: 1pt)[#x]
#let funzionalita(x) = box(fill: yellow, inset: 1pt)[#x]

#outline(title: "Indice")

= Analisi e specifica dei requisiti
== Nomi-verbi
Si vuole realizzare un software per una cooperativa di pescatori. 
La cooperativa ha una sede in cui i #attore[pescatori] portano al mattino il pescato fresco, dotata di un magazzino (per la 
conservazione di pescato congelato). Nella sede si preparano le consegne da effettuare ai clienti, e da essa partono i 
camioncini, guidati dai fattorini.  

#attore[Il gestore della cooperativa] #funzionalita[registra nel sistema pescherie e ristoranti clienti] - inserendo il #attributo[tipo] (pescheria o ristorante), #attributo[nome pescheria/ristorante], #attributo[indirizzo], #attributo[e-mail], #attributo[username], #attributo[password] - e i #classeAttore[fattorini] (#attributo[nome], #attributo[username], #attributo[password]).
Il gestore può inoltre #funzionalita[inserire le tipologie di #classe[prodotti]], ognuna identificata da un #attributo[codice], una #attributo[categoria] (e.g., pesci, crostacei, molluschi, etc.), un 
#attributo[tipo] (verace, allevamento, congelato), una #attributo[descrizione] e il #attributo[prezzo] (al Kg).  
 
I #classeAttore[ristoranti] e le #classeAttore[pescherie] clienti possono #funzionalita[consultare il sistema per visualizzare i prodotti con i prezzi]. Solo i #attore[clienti registrati] dal gestore possono accedere al sistema per #funzionalita[inviare ordini]. Una volta effettuato l'accesso, una pescheria o un ristorante 
cliente può #funzionalita[selezionare i prodotti da acquistare dalla cooperativa] - che dovranno essere consegnati il giorno dopo - 
specificando le rispettive #attributo[quantità]; il sistema predispone l’#classe[ordine] e lo #funzionalita[invia per e-mail] alla cooperativa.  
 
Uno o più #attore[impiegati della cooperativa] #funzionalita[ricevono gli ordini] e, al mattino presto, preparano le consegne affidate ai fattorini. A 
ciascun fattorino un impiegato consegna ogni mattina: #funzionalita[una stampa dell’elenco] di pescherie e ristoranti dove effettuare le 
consegne, e per ciascuna consegna l’#classe[elenco dei prodotti] (con #attributo[prezzo al Kg], #attributo[quantità] ordinata, e #attributo[prezzo totale]), che il 
fattorino farà firmare al cliente alla consegna. Effettuata una consegna, il #attore[fattorino] accede al sistema per #funzionalita[registrare che 
l’ordine è stato consegnato] (il sistema registra data e ora di consegna). 
 
Ogni settimana #funzionalita[il sistema genera in maniera automatica ed invia a ciascuna pescheria e a ciascun ristorante una #classe[fattura] con 
l’elenco degli ordini della settimana, e l’importo complessivo.]
Ogni settimana, inoltre, il sistema #funzionalita[invia al gestore della cooperativa un report degli ordini, ordinato per pescheria/ristorante 
cliente, e con il totale complessivo del venduto.] 

=== Legenda
#attore[Attore]
#classe[Classe]
#attributo[Attributo]
#classeAttore[Classe-Attore]
#funzionalita[Funzionalita]

== Revisione requisiti
=== Riassunto del primo incontro con gli stakeholders
In questo primo incontro hanno partecipato il gestore della cooperativa, diversi rappresentanti di alcuni ristoranti e pescherie, un rappresentante dei fattorini e dei dipendenti della cooperativa.

E' presente un solo magazzino, questo non cambierà nel medio termine.

Non sarà necessariamente il gestore della cooperativa a registrare i nuovi clienti i nuovi impiegati e i nuovi fattorini.

E' possibile visualizzare i prodotti disponibili senza effettuare il login, ma le restanti operazioni richiedono un login.

I pescatori non accedono in prima persona al software, invece è un impiegato a registrare i prodotti a nome loro, il software però deve tenere traccia dei pescatori e della loro relazione con i prodotti.

Gli impiegati preparano gli ordini arrivati fino a quel momento(quindi anche un ordine arrivato pochi minuti prima) la mattina(l'orario specifico non viene riportato in quanto non ritenuto necessario per il software), dopo un determinato orario gl istessi impiegati saranno occupati a registrare i prodotti provenienti dai pescatori.

Il software deve generare settimanalmente le fatture per i clienti.

Ciascun ordine viene assegnato a un solo fattorino, come avviene la scelta del fattorino non è stato definito con precisione, dovrebbe essere ottimale.

I fattorini devono poter visualizzare gli ordini loro affidati prima delle consegne.
Poichè i fattorini spesso si organizzano individualmente ogni fattorino può indicare come consegnato qualsiasi ordine, non è richiesto che il software controlli che l'ordine sia stato affidato a quello specifico fattorino.

Da un primo incontro con gli stakeholders è risultato necessaria un interfaccia dinamica, che permetta con facilità l'inserimento di nuovi dipendenti(in particolare i fattorini) e che questi siano automaticamente registrati al sistema di login. Risulta necessario poi tenere traccia dei prezzi effettivi all'interno degli ordini, in quanto i prezzi cambiano in rapida frequenza.
Un interfaccia web non è stata ritenuta necessaria nell'immediata, e potrà essere considerata per una versione successiva del software,
in tale ambito è esclusa un interfaccia grafica non web, in quanto i fattorini userebbero dispositivi diversi tra di loro per accedere al sistema.

== Revisione Requisiti
1. Un cliente è definito da un tipo(pescheria o ristante), un indirizzo, indirizzo e-mail, un username e una password (usati per il login).
+ Impiegati e fattorini sono definiti da un username _univoco_ ed hanno un nome e una password.
+ I pescatori non hanno accesso al software.
+ Il software deve tenere traccia dei pescatori e di quali prodotti hanno fornito.
5. Deve essere possibile visualizzare i prodotti disponibili.
+ I clienti possono creare un nuovo ordine
+ I nuovi ordini vengono inviati via mail alla cooperativa
+ Il gestore della cooperativa può registrare nuovi clienti.
+ Gli impiegati si occupano della preparazione degli ordini e della registrazione dei prodotti.
+ La preparazione degli ordini e la registrazione dei prodotti devono essere eseguite ripetutamente e velocemente.
11. Un impiegato non può iniziare la preparazione di un ordine già in preparazione da un altro impiegato.
+ Il software ogni lunedì mattina crea un nuovo report, un report può essere generato anche manualmente.
+ Un report è una lista _ordinata per cliente_ dei prodotti venduti.
+ Un report contiene il totale del venduto, sia singolarmente per cliente sia totale.
15. Il software ogni lunedì mattina crea una fattura per ogni cliente.
+ Ogni fattura è specifica per un cliente e contiene una lista di prodotti venduti con il relativo costo, inoltre è presente il costo totale.
+ I prodotti possono essere fatturati una sola volta.
+ Le fatture inviate automaticamente dal software al corrispettivo cliente
+ I fattorini possono visualizzare le proprie spedizioni.
20. I fattorini possono indicare come _consegnato_ qualsiasi ordine.
+ Ciascun ordine viene assegnato ad uno, ed un solo, fattorino
+ Tutti gli ordini partono da una sola sede

== Glossario
#table(
	columns: (1fr, 1fr, 0pt),
	inset: 5pt,
	align: horizon,
	[*Termine*], [*Descrizione*], [], // [*Sinonimi*],
	[Prodotto], [Un pesce, mollusco, _etc..._, qualsiasi cosa possa essere pescato e venduto], [],
	[Impiegato], [Dipendente della cooperativa, sono esclusi pescatori e dipendente di altre aziende(pescherie e ristoranti)], [],
	[Cliente], [Una pescheria o un ristorante registrati al software], [],
	[Report], [Una lista, ordinata per cliente, dei prodotti venduti. E' presente il ricavato, sia per ogni cliente, sia il ricavato totale], [],
	[Fattura], [Documento contenente tutti gli acquisti effettuati da un singolo cliente nel corso della settimana. Contiene il costo dei singoli prodotti e il costo totale], [],
)

== Classificazione dei requisiti
=== Requisiti funzionali
#table(
	columns: (2fr, 7fr, 1fr),
	inset: 3pt,
	align: horizon,
	[*ID*], [*Requisito*], [*Origine*],
	[RF01], [Il sistema deve permettere agli utenti di effettuare il login tramite username e password], [1, 2],
	[RF02], [Il sistema deve permettere al gestore della cooperativa di registrare nuovi clienti], [8],
	[RF03], [Il sistema deve permettere agli utenti, anche non loggati, di visualizzare i prodotti disponibili], [5],
	[RF04], [Il sistema deve permettere ai clienti la funzionalità di effettuare un' ordine], [6],
	[RF03], [Il sistema deve permettere agli impiegati di prepare un ordine], [9],
	[RF04], [Il sistema deve permettere agli impiegati di registrare un nuovo prodotto], [9],
	[RF06], [Il sistema dever permettere l'inserimento di più ordini in sequenza in modo agevole], [10],
	[RF07], [Il sistema dever permettere l'inserimento di più prodotti in sequenza in modo agevole], [10],
	[RF08], [Il sistema deve impedire a un impegato di iniziare la preparazione di un ordine già in preparazione da un altro impiegato], [11],
	[RF09], [Il sistema deve generare un report ogni lunedì mattina], [12],
	[RF10], [Il sistema deve permettere al solo gestore della cooperativa di generare il report manualmente], [12],
	[RF11], [Il sistema deve generare le fatture automaticamente ogni lunedì mattina], [15],
	[RF12], [Il sistema deve assegnare ciascun ordine a un solo fattorino], [21],
	[RF13], [Il sistema deve permettere ai fattorini di visualizzare le proprie spedizioni], [19],
	[RF14], [Il sistema deve permettere ai fattorini di indiciare come consegnato un ordine a loro assegnato], [20],
	[RF15], [Il sistema deve inviare una e-mail alla cooperativa quando viene creato un nuovo ordine], [7],
	[RF16], [Il sistema deve tenere traccia del pescatore relativo ad ogni prodotto], [4],
	[RF17], [Il sistema si deve assicurare che ciascun ordine sia fatturato una e una sola volta], [17],
	[RF18], [Il sistema deve inviare automaticamente le fatture al cliente], [18],
)
=== Requisiti sui dati
#table(
	columns: (2fr, 7fr, 1fr),
	inset: 3pt,
	align: horizon,
	[*ID*], [*Requisito*], [*Origine*],
	[RD01], [Un cliente può essere una pescheria o un ristorante], [1],
	[RD02], [Ciascun utente atto al login ha un username una password], [2, 1],
	[RD03], [Ogni cliente ha un nome univoco, un indirizzo, un indirizzo e-mail], [1],
	[RD04], [Il software deve tenere traccia dei pescatori e quali prodotti hanno venduto], [4],
	[RD05], [Ciascun ordine creato deve essere inviato tramite e-mail], [7],
	[RD06], [Il software deve tenere traccia dello stato di ogni ordine e se è già in preparazione], [11],
	[RD07], [Il software deve tenere traccia dei prodotti venduti e del loro prezzo], [14],
	[RD08], [Per ogni prodotto venduto il software deve tenere traccia del cliente a cui è stato venduto], [14],
	[RD09], [Il software deve tenere traccia se un prodotto è stato già fatturato], [17],
	[RD10], [Il report deve riportare, in modo ordinato per il cliente tutti i prodotti venduti], [13],
	[RD11], [Il report deve contenere il guadagno del venduto, diviso per cliente e anche nel totale],[14],
	[RD12], [La fattura deve essere specifica per ogni cliente], [16],
	[RD13], [La fattura deve contenere la lista dei prodotti venduti, con il relativo costo], [16],
	[RD14], [La fattura deve contenere il costo totale dei prodotti], [16],
)

=== Vincoli e altri requisiti
#table(
	columns: (2fr, 7fr, 1fr),
	inset: 3pt,
	align: horizon,
	[*ID*], [*Requisito*], [*Origine*],
	[RNF01], [Il sistema deve essere collegato ad internet per poter inviare email],[7, 5, 6],
	[RNF02], [Il sistema deve avere modo di tenere traccia del tempo, in particolare del giorno corrente],[12, 15],
	[RNF03], [Il sistema deve permettere l'accesso simultaneo di più utenti],[],
	[RNF04], [Il sistema deve poter salvare i dati in modo permanente],[],
	[RNF05], [Il sistema deve permettere l'accesso remoto di più utenti simultaneamente], [],
)

== Modellizione dei casi d'uso
=== Attori e casi d'uso
#grid(
	columns: (1fr, 1fr),
	gutter: 5pt,
	
	[
		*Attori primari*:
		- Gestore della cooperativa
		- Impiegato
		- Cliente
		- Tempo
		- Fattorino
	],[
		*Attore secondario*:
		- Impiegato
		- Cliente
		- Pescatore #footnote[Nota: Il pescatore non ha accesso diretto al software]
		- Servizio E-Mail
	],

	[
		*Casi d'uso di inclusione*:
		- Visualizzazione inventario
	],
	[
		*Casi d'uso di estensione*:
	]
)

#table(
	columns: (5fr, 5fr, 3fr, 3fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Attori primari*], [*Attori secondari*], [* Incl./Ext.*],

    [_UC01:_ Registrazione cliente], [Gestore Cooperativa], [Cliente], [],
    [_UC02:_ Registrazione impiegato], [Gestore Cooperativa], [Impiegato], [],
    [_UC03:_ Registrazione prodotto], [Impiegato], [Pescatore], [],
    [_UC04:_ Visualizzazione inventario], [Cliente, Utente non loggato], [], [],
    [_UC05:_ Acquisto prodotti], [Cliente], [Servizio E-Mail], [Visualizzazione inventario],
    [_UC06:_ Genera report], [Tempo, Gestore Cooperativa], [], [],
    [_UC07:_ Visualizza report], [Gestore Cooperativa], [], [],
    [_UC08:_ Genera e invia fattura], [Tempo], [Cliente], [],
    [_UC09:_ Visualizza spedizioni], [Fattorino], [], [],
    [_UC10:_ Conferma consegna], [Fattorino], [], [],
    [_UC11:_ Registrazione nuova tipologia prodotto], [Gestore Cooperativa], [], [],
)
=== Diagramma dei casi d'uso
#image("casi-duso.svg")

#pagebreak()
=== Scenari

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Registrazione cliente*],
	[*Attore Primario*], [Gestore della Cooperativa],
	[*Attore Secondario*], [Cliente],
	[*Descrizione*], [Viene registrato un nuovo cliente nel software],
	[*Pre-Condizioni*], [],
	[*Sequenza di eventi principale*], [
		1. Il gestore della cooperativa effettua il login al software
		2. Il gestore seleziona di voler registrare un cliente
		3. Il gestore inserisce i dati del cliente
		4. Il sistema controlla che i dati siano validi
	],
	[*Post-Condizioni*], [Il cliente viene registrato nel software],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [
		Il gestore riceve un messaggio di errore se i dati sono invalidi o nel caso ci sia un errore interno al software],
)

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Registrazione impiegato*],
	[*Attore Primario*], [Gestore della Cooperativa],
	[*Attore Secondario*], [Cliente],
	[*Descrizione*], [Viene registrato un nuovo impiegato nel software],
	[*Pre-Condizioni*], [],
	[*Sequenza di eventi principale*], [
		1. Il gestore della cooperativa effettua il login al software
		2. Il gestore seleziona di voler registrare un nuovo impiegato
		3. Il gestotore inserisce i dati del nuovo impiegato
		4. Il sistema controlla che i dati siano validi
	],
	[*Post-Condizioni*], [Il nuovo impiegato viene registrato nel software],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [
		Il gestore riceve un messaggio di errore se i dati sono invalidi o nel caso ci sia un errore interno al software],
)

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Registrazione prodotto*],
	[*Attore Primario*], [Impiegato],
	[*Attore Secondario*], [Pescatore],
	[*Descrizione*], [L'impiegato registra il prodotto venduto dal pescatore],
	[*Pre-Condizioni*], [L'impiegato ha effettuato il login],
	[*Sequenza di eventi principale*], [
		1. L'impiegato inserisce i dati del prodotto
	],
	[*Post-Condizioni*], [Il nuovo prodotto viene registrato],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [],
)

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Visualizzazione inventario*],
	[*Attore Primario*], [Cliente o utente generico],
	[*Attore Secondario*], [],
	[*Descrizione*], [Il cliente visualizza i prodotti in vendita],
	[*Pre-Condizioni*], [],
	[*Sequenza di eventi principale*], [
		1. L'utente si collega al software e, opzionalmente, effettua il login
		2. L'utente seleziona di voler visualizzare l'inventario
	],
	[*Post-Condizioni*], [L'inventario di prodotti disponibili viene mostrato],
	[*Casi d'uso correlati*], [Aquisto prodotto],
	[*Sequenza di eventi alternativi*], [],
)

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Acquisto prodotti*],
	[*Attore Primario*], [Cliente],
	[*Attore Secondario*], [],
	[*Descrizione*], [Il cliente effettua un ordine],
	[*Pre-Condizioni*], [Il cliente ha effettuato il login],
	[*Sequenza di eventi principale*], [
		1. Il cliente seleziona i prodotti da ordinare
		2. Il cliente conferma la selezione e il costo
	],
	[*Post-Condizioni*], [L'ordine viene registrato nel software],
	[*Casi d'uso correlati*], [Visualizzazione inventario],
	[*Sequenza di eventi alternativi*], [Il cliente annulla l'acquisto, prima della conferma],
)

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Genera report*],
	[*Attore Primario*], [Tempo, Gestore Cooperativa],
	[*Attore Secondario*], [],
	[*Descrizione*], [Viene generato il report settimanale],
	[*Pre-Condizioni*], [E' lunedì, o è stato scelto di generare un report e il gestore ha effettuato il login],
	[*Sequenza di eventi principale*], [
		1. Il software raccoglie tutti i prodotti venduti
		2. Il software genera il report
		3. Il software salva su file il report
	],
	[*Post-Condizioni*], [Viene creato un file di report],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [],
)

#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Visualizza report*],
	[*Attore Primario*], [Gestore Cooperativa],
	[*Attore Secondario*], [],
	[*Descrizione*], [Viene mostrato l'ultimo report generato],
	[*Pre-Condizioni*], [E' stato generato un report, il gestore ha effettuato il login],
	[*Sequenza di eventi principale*], [
		1. Il software individua il report più recente
	],
	[*Post-Condizioni*], [Il report viene mostrato a schermo],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [],
)
#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Genera e invio fattura*],
	[*Attore Primario*], [Tempo],
	[*Attore Secondario*], [Server EMail],
	[*Descrizione*], [Vengono generate e salvate],
	[*Pre-Condizioni*], [E' disponibile una connessione internet],
	[*Sequenza di eventi principale*], [
		1. Il software individua i prodotti da fatturare
		2. Il software genera la fattura per ogni cliente
		3. Il software invia automaticamente tutte le fatture generate
	],
	[*Post-Condizioni*], [Le fatture sono generare e salvate],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [],
)
#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Visualizza spedizioni*],
	[*Attore Primario*], [Fattorino],
	[*Attore Secondario*], [],
	[*Descrizione*], [Il fattorino visualizza le spedizioni che deve effettuare],
	[*Pre-Condizioni*], [Il fattorino ha effettuato il login],
	[*Sequenza di eventi principale*], [
		1. Il fattorino sceglie di visualizzare le consegne che deve effettuare
		2. Il software individua le spedizioni relative al fattorino
		3. Il software mostra le spedizioni
	],
	[*Post-Condizioni*], [Il fattorino vede le spedizioni che deve effettuare],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [],
)
#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Conferma consegna*],
	[*Attore Primario*], [Fattorino],
	[*Attore Secondario*], [Cliente],
	[*Descrizione*], [Il fattorino conferma l'avvenuta consegna],
	[*Pre-Condizioni*], [Il fattorino sta consegnando l'ordine, il fattorino ha effettuato il login],
	[*Sequenza di eventi principale*], [
		1. Il fattorino sta effettuando la consegna
		2. Il fattorino indica che la consegna è stata effettuata
	],
	[*Post-Condizioni*], [L'ordine viene segnato come consegnato],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [],
)
#table(
	columns: (3fr, 5fr),
	inset: 5pt,
	align: horizon,
	[*Caso d'uso*], [*Registrazione nuova tipologia prodotto*],
	[*Attore Primario*], [Gestore Cooperativa],
	[*Attore Secondario*], [],
	[*Descrizione*], [Viene inserito una nuova tipologia di prodotti],
	[*Pre-Condizioni*], [],
	[*Sequenza di eventi principale*], [
		1. Il gestore della cooperativa effettua il login al software
		2. Il gestore seleziona di voler aggiungere una tipologia di prodotti
		3. Il gestore inserisce i dati relativi alla tipologia di prodotto
		4. Il sistema controlla che i dati siano validi
	],
	[*Post-Condizioni*], [La nuova tipologia di prodotto viene registrata nel software],
	[*Casi d'uso correlati*], [],
	[*Sequenza di eventi alternativi*], [Il gestore riceve un messaggio di errore se i dati sono invalidi e nel caso ci sia un errore interno al software],
)

== Modellazione dei dati e Diagramma delle classi
#image("classi-small.svg")
==  Diagramma delle classi <diagramma_classi>
#image("classi-2.svg")

== Caso d'uso
_Nota:_ Benchè il login non sia un caso d'uso effettivo è stato isolato dagli altri.
=== Caso d'uso Login
#image("login.svg")
=== Caso d'uso Registrazione cliente
#image("impiegato-registra-cliente.svg")

== Stima dei costi
#table(
	columns: (1fr, 2fr, 2fr),
	inset: 5pt,
	align: horizon,
	[], [*Valore*], [*Peso*],
	[*NILF*], [5 #footnote[Tabelle nel DB]], [Alto],
	[*NEIF*], [5 #footnote[Fattura]], [Medio], 
	[*NEI*], [10#footnote[Ingressi registrazione cliente, prodotto, impiegato]], [Basso], 
	[*NEO*], [3#footnote[Report, Fattura, Consegne]], [Alto],
	[*NEQ*], [3#footnote[Inventario, Consegne da effettuare, Report]], [Basso], 
)

#pagebreak()
=== Fattori correttivo
#table(
	columns: (2fr, 1fr),
	inset: 5pt,
	align: horizon,
	[*Comunicazione dati*], [4],
	[*Distribuzione elaborazione*], [1],
	[*Prestazioni*], [2],
	[*Utilizzo intensivo configurazione*], [0],
	[*Frequenza delle transazione*], [2],
	[*Inserimneto dati interattivo*], [2],
	[*Efficenza per l'utente finale*], [4],
	[*Aggiornamento interattivo*], [0],
	[*Complessità elaborativa*], [1],
	[*Riusabilità*], [0],
	[*Facilità installazione*], [2],
	[*Facilità gestione operativa*], [0],
	[*Molteplicità di siti*], [4],
	[*Facilità di modifica*], [4],
	[], [26],
)

== Piano di test funzionale
Usando il _category-partition_ testing testiamo _UtenteDAO_,
per i testing vengono usati dei valori fittizzi che possono essere
caricati sul database dal file _init_testing.sql_:
#table(
	columns: (1fr, 1fr, 1fr, 1fr, 1fr),
	inset: 3pt,
	align: horizon,
	[*Identificativo*], [*Descrizione*], [*Ingresso*], [*Risultato atteso*], [*Post-Condizione*],
	[TCD01], [Controlliamo che un cliente sia trovato all'interno del database e il nome non risulti libero], [nome: pescheria_esistente], [Già esistente], [Nessun effetto],
	[TCD02], [Vedere TCD01], [nome: pescheria_NON_esistente], [Non esistente], [Nessun effetto],
	[TCD03], [Controlliamo che la creazione di un cliente già esistente fallisca], [nome: pescheria_esistente], [Errore durante l'inserimento], [Nessun effetto],
	[TCD04], [Controlliamo che l'inserimento di un cliente non esistente abbia successo], [nome: pescheria_NON_esistente], [Successo], [Viene creato il cliente],
)

#pagebreak()
= Progettazione

== Progettazione logica
Il database scelto è stato _SQLite_, tra le motivazioni principali ci sono:
- Uso di sintassi standard SQL
- Bassi requisiti prestazionali
- Facile installazione ed uso

Di seguito i comandi necessari per instanziare il database (riportati anche in _database_schema.sql_)
```SQL
CREATE TABLE IF NOT EXISTS "prodotto" (
	"codice"	INTEGER NOT NULL UNIQUE,
	"categoria"	INTEGER,
	"descrizione"	TEXT,
	"stato"	INTEGER,
	"pesoInKg"	INTEGER,
	"pescatore"	TEXT,
	PRIMARY KEY("codice" AUTOINCREMENT)
);
CREATE TABLE IF NOT EXISTS "utente" (
	"username"	TEXT NOT NULL,
	"password"	TEXT NOT NULL,
	"tipo"	INTEGER NOT NULL,
	"nome"	INTEGER,
	"tipo_cliente"	INTEGER,
	"indirizzo"	TEXT NOT NULL,
	"email"	TEXT NOT NULL,
	PRIMARY KEY("username")
);
CREATE TABLE IF NOT EXISTS "ordine" (
	"codice"	INTEGER,
	"fattorino"	TEXT,
	FOREIGN KEY("fattorino") REFERENCES "utente"("username"),
	PRIMARY KEY("codice")
);
CREATE TABLE IF NOT EXISTS "ordine_prodotti" (
	"ordine"	INTEGER,
	"prodotto"	INTEGER
);
CREATE TABLE IF NOT EXISTS "categoria_prodotto" (
	"codice"	INTEGER,
	"categoria"	INTEGER,
	"tipo"	INTEGER,
	"descrizione"	INTEGER,
	"prezzo_al_kg"	REAL,
	PRIMARY KEY("codice")
);
CREATE TABLE IF NOT EXISTS "fattura" (
	"codice"	INTEGER,
	"cliente"	TEXT,
	FOREIGN KEY("cliente") REFERENCES "utente"("username"),
	PRIMARY KEY("codice")
);
CREATE TABLE IF NOT EXISTS "fattura_prodotti" (
	"fattura"	INTEGER,
	"prodotto"	INTEGER
);
```